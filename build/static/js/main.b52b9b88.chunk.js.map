{"version":3,"sources":["services/persons.js","components/PhoneBookFilter.js","components/PhoneBookForm.js","components/Contacts.js","components/StatusDisplay.js","App.js","index.js"],"names":["baseUrl","PhoneBookFilter","filterValue","setFilterValue","value","onChange","event","target","PhoneBookForm","contacts","setContacts","contact","setContact","setStatusData","handleInputChange","name","onSubmit","preventDefault","id","newObject","existingContact","find","element","number","undefined","window","confirm","axios","put","then","response","map","data","text","type","setTimeout","catch","error","post","create","concat","required","Contacts","contactsToShow","handleContactDelete","length","key","onClick","StatusDisplay","statusData","className","App","useState","useEffect","get","formatedFilterValue","toUpperCase","filter","includes","getContactsToShow","delete","deleteObject","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b52b9b88.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst baseUrl = \"/api/persons\";\n\nexport const getAll = () => axios.get(baseUrl);\n\nexport const create = (newObject) => axios.post(baseUrl, newObject);\n\nexport const update = (id, newObject) =>\n  axios.put(`${baseUrl}/${id}`, newObject);\n\nexport const deleteObject = (id) => axios.delete(`${baseUrl}/${id}`);\n\n\n/**\n * json server url http://localhost:3001/persons\n * \n * live server base url https://phonenote.herokuapp.com\n */","import React from \"react\";\n\nconst PhoneBookFilter = ({ filterValue, setFilterValue }) => {\n  const handleFilterChange = (event) => {\n    setFilterValue(event.target.value);\n  };\n\n  return (\n    <section>\n      <label>Filter contacts with: </label>\n      <input value={filterValue} onChange={handleFilterChange} />\n    </section>\n  );\n};\n\nexport default PhoneBookFilter;\n","import React from \"react\";\n\nimport { create, update } from \"../services/persons\";\n\nconst PhoneBookForm = ({\n  contacts,\n  setContacts,\n  contact,\n  setContact,\n  setStatusData,\n}) => {\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    let existingContact = contacts.find((element) => {\n      return element.name === contact.name || element.number === contact.number;\n    });\n    if (existingContact !== undefined) {\n      if (existingContact.number !== contact.number) {\n        let shouldUpdate = window.confirm(\n          `Your contact ${contact.name} already exists, update the old number to a new one?`\n        );\n        return shouldUpdate\n          ? update(existingContact.id, contact)\n              .then((response) => {\n                setContacts(\n                  contacts.map((contact) => {\n                    return contact.id === response.data.id\n                      ? response.data\n                      : contact;\n                  })\n                );\n                setStatusData({\n                  text: `${response.data.name} updated successfully`,\n                  type: \"success\",\n                });\n                setTimeout(() => {\n                  setStatusData(null);\n                }, 2000);\n                setContact({ name: \"\", number: \"\" });\n              })\n              .catch((error) => {\n                setStatusData({\n                  text: `There was a problem updating ${contact.name} this contact might have been deleted already`,\n                  type: \"error\",\n                });\n                setTimeout(() => {\n                  setStatusData(null);\n                }, 2000);\n              })\n          : null;\n      }\n      setStatusData({\n        text: `A contact ${existingContact.name} with the number ${existingContact.number} already exists`,\n        type: \"error\",\n      });\n      setTimeout(() => {\n        setStatusData(null);\n        return;\n      }, 2000);\n      return;\n    }\n\n    create(contact).then((response) => {\n      setContacts(contacts.concat(response.data));\n      setContact({ name: \"\", number: \"\" });\n      setStatusData({\n        text: `${response.data.name} added successfully`,\n        type: \"success\",\n      });\n      setTimeout(() => {\n        setStatusData(null);\n      }, 2000);\n      return;\n    });\n  };\n\n  const handleInputChange = (event) => {\n    let name = event.target.name;\n    let value = event.target.value;\n    setContact({ ...contact, [name]: value });\n  };\n\n  return (\n    <section>\n      <h2>Add a new Contact</h2>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>Name: </label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            onChange={handleInputChange}\n            value={contact.name}\n            required\n          />\n        </div>\n        <div>\n          <label>Number: </label>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            onChange={handleInputChange}\n            value={contact.number}\n            required\n          />\n        </div>\n        <div>\n          <input type=\"submit\" value=\"Add\" />\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default PhoneBookForm;\n","import React from \"react\";\n\nconst Contacts = ({ contactsToShow, filterValue, handleContactDelete }) => {\n  return (\n    <section>\n      <h2>Contacts</h2>\n      {contactsToShow.length < 1 ? (\n        filterValue === \"\" ? (\n          <em>Your Phone book is empty, please add contacts.</em>\n        ) : (\n          <em>No contact is matching your search</em>\n        )\n      ) : (\n        contactsToShow.map((contact) => (\n          <p key={contact.id}>\n            <i>Name : {contact.name} </i>{\" \"}\n            <span> | Number : {contact.number} </span>{\" \"}\n            <button onClick={() => handleContactDelete(contact)}>DELETE</button>\n          </p>\n        ))\n      )}\n    </section>\n  );\n};\n\nexport default Contacts;\n","import React from \"react\";\n\nconst StatusDisplay = ({ statusData }) => {\n  return statusData === null ? null : (\n    <p className={statusData.type === \"error\" ? \"error-blck\" : \"success-blck\"}>\n      <em>{statusData.text}</em>\n    </p>\n  );\n};\n\nexport default StatusDisplay;\n","import React, { useState, useEffect } from \"react\";\nimport { getAll, deleteObject } from \"./services/persons\";\n\nimport PhoneBookFilter from \"./components/PhoneBookFilter\";\nimport PhoneBookForm from \"./components/PhoneBookForm\";\nimport Contacts from \"./components/Contacts\";\nimport StatusDisplay from \"./components/StatusDisplay\";\n\nfunction App() {\n  let [contacts, setContacts] = useState([]);\n  let [contact, setContact] = useState({ name: \"\", number: \"\" });\n  let [filterValue, setFilterValue] = useState(\"\");\n  let [statusData, setStatusData] = useState(null);\n\n  useEffect(() => {\n    getAll().then((response) => {\n      setContacts(response.data);\n    });\n  }, []);\n\n  const getContactsToShow = () => {\n    if (filterValue === \"\") return contacts;\n    let formatedFilterValue = filterValue.toUpperCase();\n    return contacts.filter((contact) => {\n      return (\n        contact.name.toUpperCase().includes(formatedFilterValue) ||\n        contact.number.includes(formatedFilterValue)\n      );\n    });\n  };\n\n  const handleContactDelete = ({ name, id }) => {\n    let shouldDelete = window.confirm(`delete ${name} from contacts?`);\n    if (shouldDelete) {\n      return deleteObject(id).then(() => {\n        setContacts(contacts.filter((contact) => contact.id !== id));\n        setStatusData({\n          text: `${name} deleted successfully`,\n          type: \"success\",\n        });\n        setTimeout(() => {\n          setStatusData(null);\n        }, 2000);\n      });\n    } else {\n      return;\n    }\n  };\n\n  return (\n    <main>\n      <h1>Phone Book</h1>\n      <PhoneBookFilter\n        filterValue={filterValue}\n        setFilterValue={setFilterValue}\n      />\n      <StatusDisplay statusData={statusData} />\n      <PhoneBookForm\n        contacts={contacts}\n        setContacts={setContacts}\n        contact={contact}\n        setContact={setContact}\n        setStatusData={setStatusData}\n      />\n      <Contacts\n        contactsToShow={getContactsToShow()}\n        filterValue={filterValue}\n        handleContactDelete={handleContactDelete}\n      />\n    </main>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}